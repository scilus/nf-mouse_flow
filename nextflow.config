includeConfig 'conf/base.config'

// Global default params, used in configs
params {
    input = false
    atlas = false
    outdir = 'results_mouse'
    run_denoising = true
    run_eddy = true
    b0_threshold = 100
    shell_tolerance = 100
    run_n4 = true
    use_fodf = false
    lean_output = true
    use_gpu = false
    run_preqc = false
    use_preqc = false
    processes = 10
    trace_report_suffix          = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')// Config options
}

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus  : 4,
                time  : 1.h
            ]
        }
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    no_symlink {
        params.publish_dir_mode = 'copy'
    }
    slurm {
        process {
            maxRetries          = 1
            cache               = "lenient"
            afterScript         = "sleep 60"
        }

        executor {
            name                = 'slurm'
            queueSize           = 1000
            queueGlobalStatus   = false
            queueStatInterval   = '3 min'
            submitRateLimit     = '10/1sec'
            exitReadTimeout     = '30 min'
            pollInterval        = '30 sec'
            jobName             = {
                task.name
                    .replace("[", "(")
                    .replace("]", ")")
                    .replace(" ", "_")
            }
        }
    }
    gpu {
	    params.use_gpu = true
        docker.runOptions = '-u $(id -u):$(id -g)  --gpus all'
	    singularity.runOptions='--nv'
	    apptainer.runOptions='--nv'
    }

    pre_qc {
        params.run_preqc = true
        params.run_qc = true
    }
}

report.overwrite = true

process {
    withName: "DENOISING_MPPCA" {
        ext.extent = 3
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_SINGLEEDDY" {
        ext.eddy_cmd = params.use_gpu ? "eddy" : "eddy_cpu"
        ext.encoding = "y"
        ext.readout = 0.01536
        ext.extra_args = ""
        ext.extra_ite = 5
        ext.extra_thr = params.use_gpu ? 1 : params.processes
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("bvec") ) { "${meta.id}_desc-preproc_dwi.bvec" }
                else if ( filename.contains("bval") ) {"${meta.id}_desc-preproc_dwi.bval"}
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "UTILS_EXTRACTB0" {
        ext.b0_threshold = params.b0_threshold
    }

    withName: "PREPARE_NNUNET_B0" {
        ext.suffix = "b0"
    }

    withName: "PREPARE_NNUNET_DWI" {
        ext.suffix = "dwi"
    }

    withName: "MOUSE_N4" {
        ext.threshold=0.001
        ext.convergence = "150x150x150x150"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "RESAMPLE_DWI" {
        ext.iso_min = true
        ext.interp = "lin"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("_resampled.nii.gz") ) { "${meta.id}_desc-preproc_dwi.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "RESAMPLE_MASK" {
        ext.iso_min = true
        ext.interp = "nn"
        ext.first_suffix = "mask"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "MOUSE_REGISTRATION" {
        ext.laplacian_value = "0.1mm"
        ext.atlas_50_resolution = "50"
        ext.atlas_100_resolution = "100"
        ext.atlas_resolution = ""
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("ANO.nii.gz") ) { "${meta.id}_desc-preproc_ANO.nii.gz"}
                else if ( filename.contains("ANO_LR.nii.gz") ) { "${meta.id}_desc-preproc_ANOLR.nii.gz"}
                else if ( filename.contains("moving_check") ) { "${meta.id}_desc-preproc_AMBAref.nii.gz"}
                else if ( filename.contains("0GenericAffine.mat") ) { "${meta.id}_from-template_to-dwi_affine.mat"}
                else if ( filename.contains("1Warp.nii.gz") ) { "${meta.id}_from-template_to-dwi_warp.nii.gz"}
                else if ( filename.contains("1InverseWarp.nii.gz") ) { "${meta.id}_from-dwi_to-template_warp.nii.gz"}
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "IMAGE_CONVERT" {
        ext.datatype = "uint8"
        ext.first_suffix = "mask"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("_converted.nii.gz") ) { "${meta.id}_desc-preproc_mask.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "MULTIQC" {
         publishDir = [
            path: { "${params.outdir}/${meta.id}/report/"},
            saveAs: {
                filename ->
                if ( filename.contains("_multiqc_report.html") ) { "${meta.id}_multiqc_report.html" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "RECONST_DTIMETRICS" {
        ext.ad = true
        ext.evecs = true
        ext.evals = true
        ext.fa = true
        ext.ga = true
        ext.rgb = true
        ext.md = true
        ext.mode = true
        ext.norm = true
        ext.rd = true
        ext.tensor = true
        ext.nonphysical = true
        ext.pulsation = true
        ext.residual = true
        ext.b0_thr_extract_b0 = params.b0_threshold
        ext.dwi_shell_tolerance = params.shell_tolerance
        ext.max_dti_shell_value = 3500
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("ad.nii.gz") ) { "${meta.id}_ad.nii.gz" }
                else if ( filename.contains("fa.nii.gz") ) { "${meta.id}_fa.nii.gz" }
                else if ( filename.contains("rd.nii.gz") ) { "${meta.id}_rd.nii.gz" }
                else if ( filename.contains("md.nii.gz") ) { "${meta.id}_md.nii.gz" }
                else if ( filename.contains("mode.nii.gz") ) { "${meta.id}_mode.nii.gz" }
                else if ( filename.contains("tensor.nii.gz") ) { "${meta.id}_tensor.nii.gz" }
                else if ( filename.contains("rgb.nii.gz") ) { "${meta.id}_rgb.nii.gz" }
                else if ( filename.contains("ga.nii.gz") ) { "${meta.id}_ga.nii.gz" }
                else if ( filename.contains("mqc.png") ) { "${meta.id}_mqc.png" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "RECONST_FRF" {
        ext.nvox_min = 100
        ext.max_dti_shell_value = 3500
    }

    withName: "RECONST_QBALL" {
        ext.sh_order = 6
        ext.qball = true
        ext.gfa = true
        ext.a_power = true
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: { filename -> 
                if ( filename.contains("__qball.nii.gz") ) { "${meta.id}_qball.nii.gz" }
                else if ( filename.contains("gfa.nii.gz") ) { "${meta.id}_gfa.nii.gz" }
                else if ( filename.contains("a_power.nii.gz") ) { "${meta.id}_apower.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "TRACKING_MASK" {
        ext.ventricules_labels_ids="82 401 748 800 961 962 963 1092 1107 1132 1145 1146"
        ext.seeding_labels_ids="1181 1149 1309 1321 405 1240 1216 1214 1215 1123 1119 374 1124 1131 1153 1238 1241 1315 373 1228 1244 403 402 1091 1111 1229 1278 1231 1292 971 1199 1189 970 1160 1317 1133 1307 1201 1161 1213 1147 1130 404 1116 1311 1114 1113 1322 1169 1144 1167 1164 1318 1183 1163 1159 1191 1200 1227 1294 1300 1301 1280 1291 1293 1306 1299 1286 1297 1198 1135 1134 1136 1279 1170 1281 1316 1283 1217 1203 1282 1143 1209 1129 1239 1267 1308 1128 1284 1211 1138 1179 1173 1174 1140 1182 1141 1139 1142 1154 1205 1150 1158 1152 1151 1137 1265 1266 1155 1156 1212 1176 1204 1232 1310 1242 1127 1177 1178 1243 1236 1237 1262 1290 1298 1312 1314 1171 1313 1276 1324 1272 1157 1273 1274 1275 1323 1221 1220 1122 1125 1120 1148 1188 1121 1165 1180 1187 1162 1186 1218 1185 1196 1166 1319 1247 1118 1210 1295 1296 1226 1219 1320 1258 1302 1303 1304 1305 1257 1289 1249 1250 1251 1252 1253 1263 1224 1255 1234 1233 1230 1225 1264 1222 1288 1184 1195 654 1223 1168 1172 1271"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("seeding_mask") ) { "${meta.id}_desc-seeding_mask.nii.gz" }
                else if ( filename.contains("tracking_mask") ) { "${meta.id}_desc-tracking_mask.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "TRACKING_LOCALTRACKING" {
        ext.local_compress_streamlines=false
        ext.run_local_tracking=true
        ext.local_algo="det"
        ext.local_seeding="npv"
        ext.local_nbr_seeds=1
        ext.local_step=0.05
        ext.local_theta=45
        ext.local_rk_order=1
        ext.local_min_len=3
        ext.local_max_len=12
        ext.local_tracking_mask_type="wm"
        ext.local_seeding_mask_type="fa"
        ext.local_fa_seeding_mask_threshold="0"
        ext.local_fa_tracking_mask_threshold="0"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("local_tracking.trk") ) { "${meta.id}_desc-local_tracking.trk" }
                else if ( filename.contains("seeding_mask") ) { "${meta.id}_label-seeding_desc-local_mask.nii.gz" }
                else if ( filename.contains("tracking_mask") ) { "${meta.id}_label-tracking_desc-local_mask.nii.gz"}
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "MOUSE_EXTRACTMASKS" {
        ext.labels = "FRP MO SS GU VISC AUD VIS ACA PL ILA ORB AI RSP PTLp Tea PERI ECT MOB AOB AON TT DP PIR NLOT COA TR CA DG IG ENT PAR POST PRE SUB ProS HATA APr CLA EP LA BLA BMA PA CP ACB FS OT LSS LSX sAMY PAL TH HY MB P MY CBX CBN fiber_tracts cc"
        ext.labels_dup = "FRP MO SS GU VISC Tea fiber_tracts"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("masks") ) { "${meta.id}_masks" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "MOUSE_VOLUMEROISTATS" {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/stats/"},
            saveAs: {
                filename ->
                if ( filename.contains("stats") ) { "${meta.id}__stats.json" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "MOUSE_COMBINESTATS" {
        ext.convert_to_xlsx = true
        publishDir = [
            path: { "${params.outdir}/stats/"},
            saveAs: {
                filename ->
                if ( filename.contains("stats.json") ) { "all_stats.json" }
                else if ( filename.contains("stats.xlsx") ) { "all_stats.xlsx" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_FX_EXCLUDE" {
        ext.suffix = "FX_exclude"
        ext.labels_ids = "287 288 292 295 297 300 301 304 306 308 1119 1120 1139 1142 1205 1238 1241 1242"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("FX_include_mask") ) { "${meta.id}_label-FX_desc-exclude_mask.nii.gz" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_FX_INCLUDE" {
        ext.suffix = "FX_include"
        ext.labels_ids = "149 154 159 1121 1180 1185"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("FX_include_mask") ) { "${meta.id}_label-FX_desc-include_mask.nii.gz" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_FX" {
        ext.suffix = "FX"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("FX_tracking.trk") ) { "${meta.id}_label-FX_desc-tracking.trk" }
                else if ( filename.contains("FX_tracking_stats") ) { "${meta.id}_label-FX_desc-stats.json" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_CST_EXCLUDE" {
        ext.suffix = "CST_exclude"
        ext.labels_ids = "1119 1120 1138 1179 1173 1174 1140 1182 1141 1139 1142 167 169 170 168 967 426 428 429 427 175 176 178 179 177 180 182 183 181 223 224 230 231 229 232 234 235 233 225 227 228 226 239 241 242 240 329 331 332 330 730 732 733 731 956 958 959 957 542 544 545 543 355 807 809 810 808 58 59 61 62 60 63 65 66 64 685 687 688 686 211 213 214 212 637 639 640 638 324 326 327 325 166 328 387 265 1110 366 367 368 795 788 789 794 790 791 792 793 797 796 798 799 267 966 964 1094 1102 1103 1104 1105 1106 737 822 823 824 821 673 340 473 474 476 475 416 419 417 418 266 411 431 666 667 804 321 751 86 116 52 56 57 25 362 361 414 469 383 453 457 458 459 813 679 521 724 699 750 1115 382 752 188 627 185 636 647 783 341 371 407 420 421 422 924 316 477 423 648 603 131 132 133 134 136 137 139 140 141 144 147 142 135 143 138 146 145 122 605 519 518 530 942 816 438 436 439 440 441 801 805 71"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("CST_include_mask") ) { "${meta.id}_label-CST_desc-exclude_mask.nii.gz" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_CST_INCLUDE" {
        ext.suffix = "CST_include"
        ext.labels_ids = "215 1205 1150 1158 1152 1151 1137 1265 1266 1155 115"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("CST_include_mask") ) { "${meta.id}_label-CST_desc-include_mask.nii.gz" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_CST" {
        ext.suffix = "CST"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("CST_tracking.trk") ) { "${meta.id}_label-CST_desc-tracking.trk" }
                else if ( filename.contains("CST_tracking_stats") ) { "${meta.id}_label-CST_desc-stats.json" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_AC_EXCLUDE" {
        ext.suffix = "AC_exclude"
        ext.labels_ids = "470 512 724 801"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("AC_exclude_mask") ) { "${meta.id}_label-AC_desc-exclude_mask.nii.gz" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_AC_INCLUDE" {
        ext.suffix = "AC_include"
        ext.labels_ids = "1119 1120"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("AC_include_mask") ) { "${meta.id}_label-AC_desc-include_mask.nii.gz" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_CC_EXCLUDE" {
        ext.suffix = "CC_exclude"
        ext.labels_ids = "17 18 19 20 21 322 370 440 441 805 906 941 942 944 950 1119 1120 1127 1150 1152 1166 1205 1227 1319"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("CC_exclude_mask") ) { "${meta.id}_label-CC_desc-exclude_mask.nii.gz" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_CC_INCLUDE" {
        ext.suffix = "CC_include"
        ext.labels_ids = "1139 1140 1141 1142 1173 1174 1179 1182"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("CC_include_mask") ) { "${meta.id}_label-CC_desc-include_mask.nii.gz" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "GETMIDSAGITTAL_CC" {
        ext.suffix = "CC_midsagittal"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("CC_midsagittal_mask.nii.gz") ) { "${meta.id}_label-CC_desc-midsagittal_mask.nii.gz" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "GETMIDSAGITTAL_AC" {
        ext.suffix = "AC_midsagittal"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("AC_midsagittal_mask.nii.gz") ) { "${meta.id}_label-AC_desc-midsagittal_mask.nii.gz" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_CC" {
        ext.suffix = "CC"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("CC_tracking.trk") ) { "${meta.id}_label-CC_desc-tracking.trk" }
                else if ( filename.contains("CC_tracking_stats") ) { "${meta.id}_label-CC_desc-stats.json" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "CREATE_AC" {
        ext.suffix = "AC"
        ext.run_qc = params.run_qc
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("AC_tracking.trk") ) { "${meta.id}_label-AC_desc-tracking.trk" }
                else if ( filename.contains("AC_tracking_stats") ) { "${meta.id}_label-AC_desc-stats.json" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

}

// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry    = 'docker.io'
docker.registry       = 'docker.io'
podman.registry       = 'quay.io'
singularity.registry  = 'docker.io'
charliecloud.registry = 'quay.io'

// Load igenomes.config if required
// includeConfig !params.igenomes_ignore ? 'conf/igenomes.config' : 'conf/igenomes_ignored.config'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${params.trace_report_suffix}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${params.trace_report_suffix}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${params.trace_report_suffix}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${params.trace_report_suffix}.html"
}

manifest {
    name            = 'scilus/nf-pediatric'
    contributors    = [
        [
            name: 'Elise Cosenza',
            affiliation: 'Université de Bordeaux',
            email: 'arnaud.bore@usherbrooke.ca',
            github: '@EliseCos',
            contribution: ['author'],
            orcid: 'https://orcid.org/' // List of contribution types ('author', 'maintainer' or 'contributor')
        ],
        [
            name: 'Arnaud Boré',
            affiliation: 'Université de Sherbrooke',
            email: 'arnaud.bore@usherbrooke.ca',
            github: '@arnaudbore',
            contribution: ['author', 'maintainer'],
            orcid: 'https://orcid.org/0000-0002-4822-1211'// List of contribution types ('author', 'maintainer' or 'contributor')
        ],
    ]

    homePage        = 'https://github.com/scilus/nf-mouse_flow'
    description     = """nf-mouse_flow is a neuroimaging pipeline to process ex-vivo dMRI data."""
    mainScript      = 'main.nf'
    defaultBranch   = 'master'
    nextflowVersion = '!>=24.10.0'
    version         = ''
    doi             = ''
}
