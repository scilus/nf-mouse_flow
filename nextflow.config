docker.enabled    = true
docker.runOptions = '-u $(id -u):$(id -g)'

includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus  : 4,
                time  : 1.h
            ]
        }
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    no_symlink {
        params.publish_dir_mode = 'copy'
    }
    slurm {
        process {
            maxRetries          = 1
            cache               = "lenient"
            afterScript         = "sleep 60"
        }

        executor {
            name                = 'slurm'
            queueSize           = 1000
            queueGlobalStatus   = false
            queueStatInterval   = '3 min'
            submitRateLimit     = '10/1sec'
            exitReadTimeout     = '30 min'
            pollInterval        = '30 sec'
            jobName             = {
                task.name
                    .replace("[", "(")
                    .replace("]", ")")
                    .replace(" ", "_")
            }
        }
    }
}

// Global default params, used in configs
params {
    input = false
    atlas = false
    outdir = 'results_mouse'
    run_denoising = true
    run_eddy = true
    run_n4 = true
    lean_output = true
    run_dki = false
}

process {
    withName: "DENOISING_MPPCA" {
        ext.extent = 3
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }


    withName: "RECONST_FRF" {
        ext.nvox_min = 50
        }

    withName: "PREPROC_SINGLEEDDY" {
        ext.eddy_cmd = "eddy_cpu"
        ext.encoding = "y"
        ext.readout = 0.01536
        ext.extra_args = ""
        ext.extra_ite = 5
        ext.extra_thr = 10
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("bvec") ) { "${meta.id}_desc-preproc_dwi.bvec" }
                else if ( filename.contains("bval") ) {"${meta.id}_desc-preproc_dwi.bval"}
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "MOUSE_BET" {
        ext.threshold = 0.3
        ext.dwi_shell_tolerance = 20
        ext.min_fodf_shell_value = 500
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
           saveAs: {
                filename ->
                if ( filename.contains("bvec") && !params.run_eddy) { "${meta.id}_desc-preproc_dwi.bvec" }
                else if ( filename.contains("bval") && !params.run_eddy) { "${meta.id}_desc-preproc_dwi.bval" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "MOUSE_N4" {
        ext.threshold=0.001
        ext.convergence = "150x150x150x150"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "RESAMPLE_DWI" {
        ext.iso_min = true
        ext.interp = "lin"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("_resampled.nii.gz") ) { "${meta.id}_desc-preproc_dwi.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "RESAMPLE_MASK" {
        ext.iso_min = true
        ext.interp = "nn"
        ext.first_suffix = "mask"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "MOUSE_REGISTRATION" {
        ext.laplacian_value = "0.1mm"
        ext.atlas_50_resolution = "50"
        ext.atlas_100_resolution = "100"
        ext.atlas_resolution = ""
        ext.run_qc = true
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("ANO.nii.gz") ) { "${meta.id}_desc-preproc_ANO.nii.gz"}
                else if ( filename.contains("ANO_LR.nii.gz") ) { "${meta.id}_desc-preproc_ANOLR.nii.gz"}
                else if ( filename.contains("moving_check") ) { "${meta.id}_desc-preproc_AMBAref.nii.gz"}
                else if ( filename.contains("0GenericAffine.mat") ) { "${meta.id}_from-template_to-dwi_affine.mat"}
                else if ( filename.contains("1Warp.nii.gz") ) { "${meta.id}_from-template_to-dwi_warp.nii.gz"}
                else if ( filename.contains("1InverseWarp.nii.gz") ) { "${meta.id}_from-dwi_to-template_warp.nii.gz"}
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "IMAGE_CONVERT" {
        ext.datatype = "uint8"
        ext.first_suffix = "mask"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("_converted.nii.gz") ) { "${meta.id}_desc-preproc_mask.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "MULTIQC" {
         publishDir = [
            path: { "${params.outdir}/${meta.id}/report/"},
            saveAs: {
                filename ->
                if ( filename.contains("_multiqc_report.html") ) { "${meta.id}_multiqc_report.html" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "RECONST_DTIMETRICS" {
        ext.ad = true
        ext.evecs = true
        ext.evals = true
        ext.fa = true
        ext.ga = true
        ext.rgb = true
        ext.md = true
        ext.mode = true
        ext.norm = true
        ext.rd = true
        ext.tensor = true
        ext.nonphysical = true
        ext.pulsation = true
        ext.residual = true
        ext.b0_thr_extract_b0 = 10
        ext.dwi_shell_tolerance = 50
        ext.max_dti_shell_value = 3500
        ext.run_qc = true
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("ad.nii.gz") ) { "${meta.id}_ad.nii.gz" }
                else if ( filename.contains("fa.nii.gz") ) { "${meta.id}_fa.nii.gz" }
                else if ( filename.contains("rd.nii.gz") ) { "${meta.id}_rd.nii.gz" }
                else if ( filename.contains("md.nii.gz") ) { "${meta.id}_md.nii.gz" }
                else if ( filename.contains("mode.nii.gz") ) { "${meta.id}_mode.nii.gz" }
                else if ( filename.contains("tensor.nii.gz") ) { "${meta.id}_tensor.nii.gz" }
                else if ( filename.contains("rgb.nii.gz") ) { "${meta.id}_rgb.nii.gz" }
                else if ( filename.contains("ga.nii.gz") ) { "${meta.id}_ga.nii.gz" }
                else if ( filename.contains("mqc.png") ) { "${meta.id}_mqc.png" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "RECONST_QBALL" {
        ext.sh_order = 6
        ext.gfa = true
        ext.a_power = true
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: { filename -> 
                if ( filename.contains("__qball.nii.gz") ) { "${meta.id}_qball.nii.gz" }
                else if ( filename.contains("gfa.nii.gz") ) { "${meta.id}_gfa.nii.gz" }
                else if ( filename.contains("a_power.nii.gz") ) { "${meta.id}_apower.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "TRACKING_MASK" {
        ext.ventricules_labels_ids="82 401 748 800 961 962 963 1092 1107 1132 1145 1146"
        ext.seeding_labels_ids="1138 1139 1140 1141 1142 1173 1174 1179 1182 1205"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("seeding_mask") ) { "${meta.id}_desc-seeding_mask.nii.gz" }
                else if ( filename.contains("tracking_mask") ) { "${meta.id}_desc-tracking_mask.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "TRACKING_LOCALTRACKING" {
        ext.local_compress_streamlines=false
        ext.run_local_tracking=true
        ext.local_algo="det"
        ext.local_seeding="npv"
        ext.local_nbr_seeds=1
        ext.local_step=0.05
        ext.local_theta=45
        ext.local_rk_order=1
        ext.local_min_len=3
        ext.local_max_len=12
        ext.local_tracking_mask_type="wm"
        ext.local_seeding_mask_type="fa"
        ext.local_fa_seeding_mask_threshold="0"
        ext.local_fa_tracking_mask_threshold="0"
        ext.run_qc = true
        publishDir = [
            path: { "${params.outdir}/${meta.id}/dwi/"},
            saveAs: {
                filename ->
                if ( filename.contains("local_tracking.trk") ) { "${meta.id}_desc-local_tracking.trk" }
                else if ( filename.contains("seeding_mask") ) { "${meta.id}_label-seeding_desc-local_mask.nii.gz" }
                else if ( filename.contains("tracking_mask") ) { "${meta.id}_label-tracking_desc-local_mask.nii.gz"}
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "MOUSE_EXTRACTMASKS" {
        ext.labels = "FRP MO SS GU VISC AUD VIS ACA PL ILA ORB AI RSP PTLp Tea PERI ECT MOB AOB AON TT DP PIR NLOT COA TR CA DG IG ENT PAR POST PRE SUB ProS HATA APr CLA EP LA BLA BMA PA CP ACB FS OT LSS LSX sAMY PAL TH HY MB P MY CBX CBN fiber_tracts cc"
        ext.labels_dup = "FRP MO SS GU VISC Tea fiber_tracts"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/anat/"},
            saveAs: {
                filename ->
                if ( filename.contains("masks") ) { "${meta.id}_masks" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "MOUSE_VOLUMEROISTATS" {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/stats/"},
            saveAs: {
                filename ->
                if ( filename.contains("stats") ) { "${meta.id}_stats.json" }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "MOUSE_COMBINESTATS" {
        ext.convert_to_xlsx = true
        publishDir = [
            path: { "${params.outdir}/stats/"},
            saveAs: {
                filename ->
                if ( filename.contains("stats.json") ) { "all_stats.json" }
                else if ( filename.contains("stats.xlsx") ) { "all_stats.xlsx" }
                else { params.lean_output ? null : filename }
            }
        ]
    }
}

// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry    = 'docker.io'
docker.registry       = 'docker.io'
podman.registry       = 'quay.io'
singularity.registry  = 'docker.io'
charliecloud.registry = 'quay.io'

// Load igenomes.config if required
// includeConfig !params.igenomes_ignore ? 'conf/igenomes.config' : 'conf/igenomes_ignored.config'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false



manifest {
    name            = 'scilus/nf-pediatric'
    contributors    = [
        [
            name: 'Elise Cosenza',
            affiliation: 'Université de Bordeaux',
            email: 'arnaud.bore@usherbrooke.ca',
            github: '@EliseCos',
            contribution: ['author'],
            orcid: 'https://orcid.org/' // List of contribution types ('author', 'maintainer' or 'contributor')
        ],
        [
            name: 'Arnaud Boré',
            affiliation: 'Université de Sherbrooke',
            email: 'arnaud.bore@usherbrooke.ca',
            github: '@arnaudbore',
            contribution: ['author', 'maintainer'],
            orcid: 'https://orcid.org/0000-0002-4822-1211'// List of contribution types ('author', 'maintainer' or 'contributor')
        ],
    ]

    homePage        = 'https://github.com/scilus/nf-mouse_flow'
    description     = """nf-mouse_flow is a neuroimaging pipeline to process ex-vivo dMRI data."""
    mainScript      = 'main.nf'
    defaultBranch   = 'master'
    nextflowVersion = '!>=24.10.0'
    version         = ''
    doi             = ''
}